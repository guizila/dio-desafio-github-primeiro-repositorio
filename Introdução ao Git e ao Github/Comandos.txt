Shift + Insert (Colar)
Ctrl + L (Limpar)
git init (criar um repositório novo em branco)
git init <O nome do seu repositório> (criar repositório com nome específico)
git clone <URL do seu projeto> (cria uma cópia exata de um repositório já existente)
git add seu_arquivo (adicionar o arquivo em específico ao repositório)
git add * (adicionar todos os arquivos novos e/ou modificados ao repositório)
git commit -a (git add + git commit)
git commit -m “seu comentário” (adicionar uma mensagem para a execução de um commit)
git branch (lista todas as ramificações)
git branch <nome_do_branch> (cria um branch com o nome especificado)
git branch -d <nome_do_branch> (deleta o branch com o nome especificado)
git checkout <nome_do_branch> (trocar de uma ramificação para outra)
git checkout -b <nome_do_branch_novo> (criando e fazendo o checkout de um novo branch com um único comando)
git remote add <nomecurto> <url> (estabelece uma conexão entre seu repositório local e um repositório remoto)
git push -u <nome_curto> <nome_do_branch> (subir suas modificações para um repositório remoto)
git push –set-upstream <nome_curto> <nome_do_branch> (É importante especificar a origem e o upstream antes de usar o git push)
git fetch (baixar as mudanças criadas por outros membros do seu projeto colaborativo,A partir desse comando, você irá receber todas as informações de commits, para avaliar, antes de aplicar essas alterações na sua versão local do repositório.)
git pull <URL> (baixa o conteúdo (não os metadados) do que foi alterado no repositório remoto para o seu repositório local e imediatamente atualiza seu contreúdo para a última versão.)
git stash (Esse comando Git armazena temporariamente seus arquivos modificados em uma área chamada stash (“esconderijo”), sem interagir com os outros arquivos até ser necessário.)
git stash list (Para listar todos os seus “esconderijos”.)
git stash apply (Quando for o momento de aplicar o conteúdo do stash a um branch)
git show <hash_do_commit> (detalhes específicos sobre um commit que o log não mostra? O comando Git show é a resposta)
git rm <nome_do_arquivo> (Para remover arquivos da sua pasta)
git help <comando que se tem dúvida> (buscar ajuda no terminal)
git merge <nome_do_branch> (integra as mudanças de dois branches diferentes em um único branch. Ele precisa ser iniciado a partir de um branch já selecionado, que será mesclado com outro, com o nome passado por parâmetro)
git rebase <base> (integra dois branches em um branch único. Porém, esse comando refaz o histórico de commits, tornando-o linear.)
git pull –rebase (Essa é uma variação do comando pull mostrado anteriormente. A partir dessa instrução, o Git irá fazer um rebase (não um merge) depois de se utilizar um comando pull)
git cherry-pick <commit-hash> (selecionar qualquer commit específico de um brach e aplicá-lo a outro branch, sem precisar de uma mescla completa. A operação fica adicionada no histórico)
git archive –format zip HEAD > archive-HEAD.zip (combina múltiplos arquivos em um único arquivo, como se fosse um arquivo zipado. Esse pacote pode ser aberto depois e os arquivos contidos podem ser extraídos individualmente)
git blame <nome_do_arquivo> (comando “dedo-duro”, blame ajuda a determinar qual usuário realizou qual mudança em um determinado arquivo)
git tag -a v1.0.0 (Tags são uma boa opção para marcar uma branch e evitar alteração, principalmente em releases públicos)
git diff HEAD <nome_do_arquivo> (comparando o repositório ativo com o repositório local)
git diff <branch de origem> <branch de destino> (comparando duas ramificações)
git citool (oferece uma alternativa gráfica ao commit)
git whatchanged (oferece informações de log, mas em formato raw)